Function Uninstall-DbaReports {
    <#
    .SYNOPSIS 
        Uninstalls both the server and client components for dbareports
    
    .DESCRIPTION
        Uninstalls both the server and client components for dbareports. This process is not reversible. Various switches can be passed to uninstall while preventing the deletion/removal of various aspects of dbareports.
    
    .PARAMETER NoDatabase
        Uninstalls dbareports but does not remove the database.
    
    .PARAMETER NoJobs
        Uninstalls dbareports but without removing the jobs created by the install process.
    
    .PARAMETER NoPsFiles
        Uninstalls dbareports without removing the powershell files.
    
    .PARAMETER Force
        Uninstalls dbareports without prompting for confirmation.
        
    .LINK
        https://dbareports.io/functions/Uninstall-DbaReports
    
    .EXAMPLE
        Uninstall-DbaReports
        Completely Uninstalls DbaReports
    
    .EXAMPLE
        Uninstall-DbaReports -NoDatabase -NoJobs
        Uninstalls DbaReports without removing the database or the jobs generated by the install process.
    
    .EXAMPLE
        Uninstall-DbaReports -NoPsFiles -Force
        Uninstalls DbaReports without removing the powershell files and WITHOUT prompting for user confirmation.
#>
    [CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "High")]
    Param (
        [string]$JobCateogry = "dbareports collection jobs",
        [switch]$NoDatabase,
        [switch]$NoJobs,
        [switch]$NoPsFiles,
        [switch]$Force
    )
	
    DynamicParam { if ($SqlInstance) { return (Get-ParamSqlProxyAccount -SqlServer $SqlInstance -SqlCredential $SqlCredential) } }
	
    BEGIN {
        $Module = "dbareports"
		
        if (-not (Get-DbrConfig -Name app.sqlinstance)) {
            Stop-PSFFunction -Message "Configuration values for dbareports not found. Unable to continue"
            return
        }

        $SqlInstance = Get-DbrConfigValue -Name app.sqlinstance
        $InstallDatabase = Get-DbrConfigValue -Name app.databasename
        $SqlCredential = Get-DbrConfigValue -Name app.sqlcredential
		
        $InstallPath = Get-DbrConfigValue -Name app.installpath
        $LogFileFolder = Get-DbrConfigValue -Name app.logfilefolder

        If ($Force -eq $true) { $ConfirmPreference = 'None' }
		
        # Connect to dbareports server
        try {
            Write-PSFMessage -Level Verbose  -Message "Connecting to $SqlInstance" -Tag $Module
            $Server = Connect-DbaInstance -SqlInstance $SqlInstance -SqlCredential $SqlCredential 
        }
        catch {
            Stop-PSFFunction -Message "Failed to connect to $SqlInstance" -ErrorRecord $_ -Tag $Module #-EnableException $EnableException 
            break
        }
		
        $source = $Server.DomainInstanceName
		
        if ($source -ne $env:COMPUTERNAME) {
            # Delete files over UNC
            $InstallPath = Join-AdminUnc $Source $InstallPath
            $LogFileFolder = Join-AdminUnc $Source $LogFileFolder
        }
		
        if ($NoDatabase -eq $false) {
            $InstallDatabaseExists = $Server.Databases[$InstallDatabase].Count
            if ($InstallDatabaseExists -eq $false) {
                Stop-PSFFunction -Message "$InstallDatabase does not exist on $SqlInstance" -ErrorRecord $_ -Tag $Module #-EnableException $EnableException 
                break
            }				
        }
		
        if ($NoPsFiles -eq $false) {
            $fileexists = Test-Path $InstallPath
		
            if ($fileexists -eq $false -and $NoPsFiles -eq $false) {
                Stop-PSFFunction -Message "$InstallPath does not exist or access denied" -ErrorRecord $_ -Tag $Module #-EnableException $EnableException 
                break				
            }
        }
    }
	
    PROCESS {
        if ($NoPsFiles -eq $false) {
            If ($Pscmdlet.ShouldProcess($SqlInstance, "Deleting $LogFileFolder")) {
                Write-Output "Deleting $LogFileFolder"
                Remove-Item $LogFileFolder -Force -Recurse
            }
			
            If ($Pscmdlet.ShouldProcess($SqlInstance, "Deleting $InstallPath")) {
                Write-Output "Deleting $InstallPath"
                Remove-Item $InstallPath -Force -Recurse
            }
			
            $clientconfig = Get-ConfigFileName
            If ($Pscmdlet.ShouldProcess($SqlInstance, "Removing local config file at $clientconfig")) {
                Write-Output "Deleting $clientconfig"
                Remove-Item $clientconfig -Force -ErrorAction SilentlyContinue
            }
        }
		
        if ($NoDatabase -eq $false) {
            $now = Get-Date
            $lastfull = $sourceserver.Databases[$InstallDatabase].LastBackupDate
            $lastlog = $sourceserver.Databases[$InstallDatabase].LastLogBackupDate
			
            if (($now - $lastfull).Days -gt 0) { $prompt = $true }
            if (($now - $lastlog).Days -gt 0) { $prompt = $true }
			
            if ($prompt -eq $true -and $Force -eq $false) {
                If ($Pscmdlet.ShouldProcess("console", "Prompting to confirm drop of database with no recent backups")) {
                    $title = "A backup of $InstallDatabase has not been performed within the last day."
                    $message = "Are you sure you'd like to drop the dbareports database? (Y/N)"
                    $yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", "Will continue"
                    $no = New-Object System.Management.Automation.Host.ChoiceDescription "&No", "Will exit"
                    $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)
                    $result = $host.ui.PromptForChoice($title, $message, $options, 0)
					
                    if ($result -eq 1) {
                        Write-Output "Skipping database drop"
                    }
                }
            }
			
            If ($Pscmdlet.ShouldProcess($SqlInstance, "Dropping database $InstallDatabase")) {
                if ($result -ne 1) {
                    try {
                        Write-Output "Dropping database $InstallDatabase"
                        $sql = "ALTER DATABASE [$InstallDatabase] SET  SINGLE_USER WITH ROLLBACK IMMEDIATE"
                        $null = $sourceserver.ConnectionContext.ExecuteNonQuery($sql)
						
                        $sql = "DROP DATABASE [$InstallDatabase]"
                        $null = $sourceserver.ConnectionContext.ExecuteNonQuery($sql)
                    }
                    catch {
                        $null = $sourceserver.KillDatabase($InstallDatabase)
                    }
                }
            }
        }
		
        if ($NoJobs -eq $false) {
            If ($Pscmdlet.ShouldProcess($SqlInstance, "Deleting Agent Jobs and Job Category")) {
                $dbrjobs = $sourceserver.JobServer.Jobs | Where-Object { $_.Category -eq $JobCateogry }
				
                foreach ($job in $dbrjobs) {
                    $jobname = $job.name
                    Write-Output "Dropping job $jobname"
                    $job.Drop()
                }
				
                $schedules = $sourceserver.JobServer.SharedSchedules | Where-Object { $_.Name -like "*dbareports*" }
                foreach ($schedule in $schedules) {
                    $schedulename = $schedule.name
                    Write-Output "Dropping shared schedule $schedulename"
                    $schedule.Drop()
                }
				
                $dbrcategory = $sourceserver.JobServer.JobCategories | Where-Object { $_.Name -eq $JobCateogry }
                Write-Output "Dropping job category $JobCateogry"
                $dbrcategory.drop()
				
            }
        }
    }
	
    END {
        $sourceserver.ConnectionContext.Disconnect()
    }
}